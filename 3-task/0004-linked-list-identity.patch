From e64f716793cf38839e2c4d64aa12351821658216 Mon Sep 17 00:00:00 2001
From: Nikolay Boldyrev <nick.alsh94@gmail.com>
Date: Mon, 12 Aug 2024 11:36:15 +0300
Subject: [PATCH] linked-list-identity

Signed-off-by: Nikolay Boldyrev <nick.alsh94@gmail.com>
---
 samples/hello_world/hello_kernelcare.c | 115 +++++++++++++++++++++++--
 samples/hello_world/hello_kernelcare.h |  12 +++
 2 files changed, 121 insertions(+), 6 deletions(-)
 create mode 100644 samples/hello_world/hello_kernelcare.h

diff --git a/samples/hello_world/hello_kernelcare.c b/samples/hello_world/hello_kernelcare.c
index 38a1a4d..5ef9ebf 100644
--- a/samples/hello_world/hello_kernelcare.c
+++ b/samples/hello_world/hello_kernelcare.c
@@ -1,10 +1,5 @@
 // SPDX-License-Identified: GPL-2.0-or-later
-#include <linux/module.h>
-#include <linux/kernel.h>
-#include <linux/init.h>
-#include <linux/debugfs.h>
-#include <linux/jiffies.h>
-#include <linux/mutex.h>
+#include "hello_kernelcare.h"
 
 static char kernelcare_data_buffer[PAGE_SIZE];
 static struct mutex kernelcare_data_lock;
@@ -13,6 +8,7 @@ struct dentry *kernelcare_mod_debugfs_dir;
 static ssize_t device_read_jiffies(struct file *, char *, size_t, loff_t *);
 static ssize_t device_read_data(struct file *, char *, size_t, loff_t *);
 static ssize_t device_write_data(struct file *, const char __user *, size_t, loff_t *);
+#define KC_ERROR_IDENTITY_NOT_FOUND -1
 
 static const struct file_operations fops_jiffies = {
 	.owner = THIS_MODULE,
@@ -25,9 +21,116 @@ static const struct file_operations fops_data = {
 	.write = device_write_data
 };
 
+struct identity {
+	char name[20];
+	int id;
+	bool hired;
+};
+
+struct identity_list {
+	struct list_head list;
+	struct identity ident;
+};
+
+LIST_HEAD(head);
+
+
+int identity_create(char *name, int id)
+{
+	struct identity_list *p = kmalloc(sizeof(struct identity_list), GFP_KERNEL);
+
+	if (!p)
+		return -ENOMEM;
+
+	strscpy(p->ident.name, name, sizeof(p->ident.name) - 1);
+	int len = min(strlen(name), 19);
+
+	p->ident.name[len] = '\n';
+	p->ident.id = id;
+	p->ident.hired = false;
+	INIT_LIST_HEAD(&p->list);
+	list_add(&p->list, &head);
+	return 0;
+}
+
+struct identity_list *__identity_find(int id)
+{
+	struct list_head *pos;
+
+	list_for_each(pos, &head) {
+		struct identity_list *iter = list_entry(pos, struct identity_list, list);
+
+		if (iter->ident.id == id)
+			return iter;
+	}
+	return NULL;
+}
+
+struct identity *identity_find(int id)
+{
+	struct identity_list *res = __identity_find(id);
+
+	if (res == NULL)
+		return NULL;
+	return &res->ident;
+}
+
+void identity_destroy(int id)
+{
+	struct identity_list *res = __identity_find(id);
+
+	if (res == NULL)
+		return;
+	list_del(&res->list);
+	kfree(res);
+}
+
+int identity_hire(int id)
+{
+	struct identity *res = identity_find(id);
+
+	if (res == NULL)
+		return KC_ERROR_IDENTITY_NOT_FOUND;
+	res->hired = true;
+	return 0;
+}
+
 static int __init module_start(void)
 {
 	pr_debug("Hello, KernelCare!\n");
+	
+	struct identity *temp;
+
+	int ret = identity_create("Nikolay", 1);
+
+	if (ret)
+		return ret;
+
+	ret = identity_create("Sofia", 2);
+
+	if (ret) {
+		identity_destroy(1);
+		return ret;
+	}
+
+	temp = identity_find(1);
+	if (temp == NULL)
+		pr_debug("id 1 is NULL\n");
+	else
+		pr_debug("id 1 = %s\n", temp-> name);
+
+	ret = identity_hire(1);
+	if (ret)
+		pr_debug("unable to hire person 1: %d\n", ret);
+
+	temp = identity_find(10);
+	if (temp == NULL)
+		pr_debug("id 10 not found\n");
+
+	identity_destroy(2);
+	identity_destroy(1);
+
+
 	kernelcare_mod_debugfs_dir = debugfs_create_dir("kernelcare", NULL);
 	if (IS_ERR(kernelcare_mod_debugfs_dir)) {
 		pr_err("failed to create kernelcare debugfs directory\n");
diff --git a/samples/hello_world/hello_kernelcare.h b/samples/hello_world/hello_kernelcare.h
new file mode 100644
index 0000000..6b5eabc
--- /dev/null
+++ b/samples/hello_world/hello_kernelcare.h
@@ -0,0 +1,12 @@
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/debugfs.h>
+#include <linux/jiffies.h>
+#include <linux/mutex.h>
+
+int identity_create(char *name, int id);
+struct identity_list *__identity_find(int id);
+struct identity *identity_find(int id);
+void identity_destroy(int id);
+int identity_hire(int id);
-- 
2.46.0

