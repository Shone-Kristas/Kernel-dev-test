From 1fda6864b9b2be2208fc84a68ff381e9f4e1d533 Mon Sep 17 00:00:00 2001
From: Nikolay Boldyrev <nick.alsh94@gmail.com>
Date: Sun, 11 Aug 2024 18:31:43 +0300
Subject: [PATCH] kernelcare-debugfs-data

Signed-off-by: Nikolay Boldyrev <nick.alsh94@gmail.com>
---
 samples/hello_world/hello_kernelcare.c | 75 ++++++++++++++++++++++++--
 1 file changed, 70 insertions(+), 5 deletions(-)

diff --git a/samples/hello_world/hello_kernelcare.c b/samples/hello_world/hello_kernelcare.c
index 1373f2c..38a1a4d 100644
--- a/samples/hello_world/hello_kernelcare.c
+++ b/samples/hello_world/hello_kernelcare.c
@@ -4,13 +4,25 @@
 #include <linux/init.h>
 #include <linux/debugfs.h>
 #include <linux/jiffies.h>
+#include <linux/mutex.h>
 
-static ssize_t device_read(struct file *, char *, size_t, loff_t *);
+static char kernelcare_data_buffer[PAGE_SIZE];
+static struct mutex kernelcare_data_lock;
 struct dentry *kernelcare_mod_debugfs_dir;
 
-static const struct file_operations fops = {
+static ssize_t device_read_jiffies(struct file *, char *, size_t, loff_t *);
+static ssize_t device_read_data(struct file *, char *, size_t, loff_t *);
+static ssize_t device_write_data(struct file *, const char __user *, size_t, loff_t *);
+
+static const struct file_operations fops_jiffies = {
+	.owner = THIS_MODULE,
+	.read = device_read_jiffies
+};
+
+static const struct file_operations fops_data = {
 	.owner = THIS_MODULE,
-	.read = device_read
+	.read = device_read_data,
+	.write = device_write_data
 };
 
 static int __init module_start(void)
@@ -26,7 +38,16 @@ static int __init module_start(void)
 			0444,
 			kernelcare_mod_debugfs_dir,
 			NULL,
-			&fops
+			&fops_jiffies
+	);
+	memset(kernelcare_data_buffer, 0, PAGE_SIZE);
+	mutex_init(&kernelcare_data_lock);
+	debugfs_create_file (
+			"data",
+			0644,
+			kernelcare_mod_debugfs_dir,
+			NULL,
+			&fops_data
 	);
 	return 0;
 }
@@ -37,7 +58,7 @@ static void __exit module_end(void)
 	pr_debug("Bye!\n");
 }
 
-static ssize_t device_read(struct file *filp, char *buffer, size_t len, loff_t *offset)
+static ssize_t device_read_jiffies(struct file *filp, char *buffer, size_t len, loff_t *offset)
 {
 	char msg[20];
 	int msg_size = sprintf(msg, "%lu", jiffies);
@@ -51,6 +72,50 @@ static ssize_t device_read(struct file *filp, char *buffer, size_t len, loff_t *
 	return msg_size;
 }
 
+static ssize_t device_read_data(struct file *filp, char *buffer, size_t len, loff_t *offset)
+{
+	ssize_t ret;
+
+	mutex_lock(&kernelcare_data_lock);
+	size_t data_len = strlen(kernelcare_data_buffer);
+
+	if (*offset >= data_len) {
+		ret = 0;
+		goto out;
+	}
+	if (len > data_len - *offset)
+		len = data_len - *offset;
+	if (copy_to_user(buffer, kernelcare_data_buffer + *offset, len)) {
+		ret = -EFAULT;
+		goto out;
+	}
+	*offset += len;
+	ret = len;
+out:
+	mutex_unlock(&kernelcare_data_lock);
+	return ret;
+}
+
+static ssize_t device_write_data(struct file *filp, const char __user *buffer, size_t len, loff_t *offset)
+{
+	ssize_t ret;
+
+	mutex_lock(&kernelcare_data_lock);
+	if(len > PAGE_SIZE - 1)
+		len = PAGE_SIZE - 1;
+	memset(kernelcare_data_buffer, 0, PAGE_SIZE);
+	if (copy_from_user(kernelcare_data_buffer, buffer, len)) {
+		ret = -EFAULT;
+		goto out;
+	}
+	kernelcare_data_buffer[len] = '\0';
+	ret = len;
+out:
+	mutex_unlock(&kernelcare_data_lock);
+	return ret;
+}
+
+
 module_init(module_start);
 module_exit(module_end);
 
-- 
2.46.0

